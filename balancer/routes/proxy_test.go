package routes

import (
	"fmt"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/juice-shop/multi-juicer/balancer/pkg/bundle"
	"github.com/juice-shop/multi-juicer/balancer/pkg/testutil"
	"github.com/stretchr/testify/assert"
	"k8s.io/client-go/kubernetes/fake"
)

func TestProxyHandler(t *testing.T) {
	teamFoo := "foobar"
	// teamBar := "foobar"

	t.Run("routes the request to backend url generated by the JuiceShopUrlForTeam function", func(t *testing.T) {
		req, _ := http.NewRequest("POST", "/hello-world", nil)
		req.Header.Set("Cookie", fmt.Sprintf("balancer=%s", testutil.SignTestTeamname(teamFoo)))
		rr := httptest.NewRecorder()

		ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			w.WriteHeader(http.StatusOK)
			fmt.Fprintln(w, "Hello, Test from "+r.URL.Path)
		}))
		defer ts.Close()

		server := http.NewServeMux()

		clientset := fake.NewSimpleClientset()
		bu := testutil.NewTestBundleWithCustomFakeClient(clientset)

		bu.GetJuiceShopUrlForTeam = func(team string, _bundle *bundle.Bundle) string {
			return fmt.Sprintf("%s/%s/", ts.URL, team)
		}
		AddRoutes(server, bu)

		server.ServeHTTP(rr, req)

		assert.Equal(t, rr.Code, http.StatusOK)
		assert.Equal(t, rr.Body.String(), "Hello, Test from /foobar/hello-world\n")
	})
}
